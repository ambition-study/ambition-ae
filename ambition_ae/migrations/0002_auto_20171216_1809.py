# Generated by Django 2.0 on 2017-12-16 16:09

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.utils
import edc_protocol.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ambition_ae', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AntibioticTreatment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeathReport',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('death_datetime', models.DateTimeField(validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date and Time of Death')),
                ('study_day', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(80)], verbose_name='Study day')),
                ('death_as_inpatient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Death as inpatient')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of local study Dr and local PI)')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeathReportTmgOne',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between study doctor and TMG member?')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
                ('death_report', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_ae.DeathReport')),
            ],
            options={
                'verbose_name_plural': 'Death report TMG 1',
            },
        ),
        migrations.CreateModel(
            name='DeathReportTmgTwo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between study doctor and TMG member?')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
                ('death_report', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_ae.DeathReport')),
            ],
            options={
                'verbose_name_plural': 'Death report TMG 2',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeathReport',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('death_datetime', models.DateTimeField(validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date and Time of Death')),
                ('study_day', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(80)], verbose_name='Study day')),
                ('death_as_inpatient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Death as inpatient')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of local study Dr and local PI)')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeathReportTmgOne',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between study doctor and TMG member?')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('death_report', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_ae.DeathReport')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeathReportTmgTwo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cause_of_death', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between study doctor and TMG member?')),
                ('cause_of_death_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('tb_site', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(verbose_name='Narrative')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('death_report', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_ae.DeathReport')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProtocolDeviationViolation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(db_index=True, max_length=30)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('deviation_or_violation', models.CharField(choices=[('DEVIATION', 'Deviation'), ('VIOLATION', 'Violation')], max_length=10, verbose_name='Is this a protocol deviation or violation?')),
                ('participant_safety_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on safety of the participant?')),
                ('participant_safety_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('study_outcomes_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on Study outcomes?')),
                ('study_outcomes_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('date_violation_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date violation occured:')),
                ('protocol_violation_type', models.CharField(blank=True, choices=[('failure_to_obtain_informed_consent', 'Failure to obtain informed consent'), ('enrollment_of_ineligible_patient', 'Enrollment of ineligible patient'), ('screening_procedure not done', 'Screening procedure required by protocol not done'), ('screening_or_on-study_procedure', 'Screening or on-study procedure/lab work required not done'), ('incorrect_research_treatment', 'Incorrect research treatment given to patient'), ('procedure_not_completed', 'On-study procedure required by protocol not completed'), ('visit_non-compliance', 'Visit non-compliance'), ('medication_stopped_early', 'Medication stopped early'), ('medication_noncompliance', 'Medication_noncompliance'), ('national_regulations_not_met', 'Standard WPD, ICH-GCP, local/national regulations not met'), ('OTHER', 'Other')], max_length=70, null=True, verbose_name='Type of Protocol Violation/Deviation:')),
                ('protocol_violation_type_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('violation_description', models.TextField(blank=True, null=True, verbose_name='Describe the violation fully. How the violation happened, what occurred?')),
                ('violation_reason', models.TextField(blank=True, null=True, verbose_name='Explain the reason why the violation occurred:')),
                ('corrective_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Corrective action date and time:')),
                ('corrective_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Corrective action taken:')),
                ('preventative_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Preventative action date and time:')),
                ('preventative_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Preventative action taken:')),
                ('action_required', models.CharField(blank=True, choices=[('remain_on_study', 'Participant to remain on trial'), ('to_be_withdrawn', 'Participant to be withdrawn from trial'), ('remain_on_study_modified', 'Patient remains on study but data analysis will be modified')], max_length=45, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRecurrenceSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(db_index=True, max_length=30)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('meningitis_symptom_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other symptom, please specify')),
                ('patient_readmitted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has the patient been re-admitted due to these recurrent symptoms?')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(15)], verbose_name='Score:')),
                ('recent_seizure', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Recent seizure (<72 hrs):')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('focal_neurologic_deficit', models.CharField(blank=True, max_length=15, null=True, verbose_name='If "Focal neurologic deficit" chosen, please specify')),
                ('cn_palsy_chosen_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='If other CN Palsy')),
                ('lp_completed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If YES, complete LP form', max_length=5, verbose_name='LP completed')),
                ('amb_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('amb_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If YES, specify length of course')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='TB treatment:')),
                ('steroids_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('steroids_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If YES, specify the length of course in days:')),
                ('steroids_choices', models.CharField(choices=[('N/A', 'Not applicable'), ('oral_prednisolone', 'Oral Prednisolone'), ('iv_dexamethasone', 'IV Dexamethasone used'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='If YES')),
                ('steroids_choices_other', models.CharField(blank=True, max_length=50, verbose_name='If other steroids, please specify')),
                ('CD4_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='CD4 count (if available)')),
                ('antibiotic_treatment_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotic treatment, please specify')),
                ('on_arvs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('on_arvs_before_enrollment', 'Already on ARVs before enrollment')], max_length=26, verbose_name='On ARVs:')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study date ARVs started.')),
                ('arvs_stopped', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='ARVs stopped this clinical episode?')),
                ('narrative_summary', models.TextField(help_text='Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology', verbose_name='Narrative summary of recurrence of symptoms:')),
                ('dr_opinion', models.CharField(choices=[('cm_release', 'CM Relapse'), ('cm_iris', 'CM IRIS'), ('OTHER', 'Other')], max_length=10, verbose_name="Study doctor's opinion:")),
                ('dr_opinion_other', models.CharField(blank=True, max_length=50, null=True, verbose_name="If other doctor's opinion, please specify")),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalStudyTerminationConclusion',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(db_index=True, max_length=30)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('patient_terminated_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date patient terminated on study:')),
                ('last_study_fu_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of last research follow up (if different):')),
                ('discharged_after_initial_admission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=6, verbose_name='Was the patient discharged after initial admission?')),
                ('initial_discharge_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of initial discharge')),
                ('readmission_after_initial_discharge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=7, verbose_name='Was the patient readmitted following initial discharge?')),
                ('readmission_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of readmission')),
                ('discharged_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date discharged')),
                ('termination_reason', models.CharField(choices=[('10_weeks_completed_follow_up', 'Patient completed 10 weeks of follow-up'), ('patient_lost_to_follow_up', 'Patient lost to follow-up'), ('dead', 'Reported/known to have died'), ('consent_withdrawn', 'Withdrawal of Subject Consent for participation'), ('care_transferred_to_another_institution', 'Care transferred to another institution'), ('late_exclusion_criteria_met', 'Late exclusion criteria met'), ('included_in_error', 'Included in error')], help_text='If included in error, be sure to fill in protocol deviation form.', max_length=75, verbose_name='Reason for study termination')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Death')),
                ('consent_withdrawal_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason for withdrawing consent')),
                ('willing_to_complete_10w', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=12, verbose_name='Is the patient willing to complete the W10 and W16 FU visit only?')),
                ('willing_to_complete_centre', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=17, verbose_name='Is the patient willing to complete the W10and W16 FU visit only at their new care centre?')),
                ('willing_to_complete_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name=' Date the 10W FU due')),
                ('protocol_exclusion_criterion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=12, verbose_name='Late protocol exclusion met?')),
                ('included_in_error_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If included in error, date')),
                ('included_in_error', models.TextField(blank=True, max_length=300, null=True, verbose_name='If included in error, narrative:')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('already_on_rifampicin', 'Already on Rifampicin')], max_length=30, verbose_name='Rifampicin started since week 4?')),
                ('first_line_regimen', models.CharField(choices=[('N/A', 'Not applicable'), ('TDF_3TC_FTC_with_EFV_or_NVP', 'TDF + 3TC/FTC + either EFV or NVP or DTG'), ('AZT_3TC_with_EFV_NVP_or_DTG', 'AZT+3TC+ either EFV or NVP or DTG'), ('OTHER', 'Other')], default='N/A', max_length=75, verbose_name='ART regimen started for naive patients (or regimen switched for those already on ARVs)')),
                ('first_line_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('second_line_regimen', models.CharField(choices=[('N/A', 'Not applicable'), ('TDF_3TC_FTC_with_ATZ_r_or_Lopinavir_r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT_3TC_with_ATZ_r_or_Lopinavir_r', 'AZT +3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other')], default='N/A', max_length=50, verbose_name='Second line / second switch ARV regimen')),
                ('second_line_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('arvs_switch_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='ARV switch date')),
                ('first_line_choice', models.CharField(choices=[('N/A', 'Not applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], default='N/A', max_length=5, verbose_name='If first line:')),
                ('arvs_delay_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason ARVs not started')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='MeningitisSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Neurological',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtocolDeviationViolation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(max_length=30, unique=True)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('deviation_or_violation', models.CharField(choices=[('DEVIATION', 'Deviation'), ('VIOLATION', 'Violation')], max_length=10, verbose_name='Is this a protocol deviation or violation?')),
                ('participant_safety_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on safety of the participant?')),
                ('participant_safety_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('study_outcomes_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on Study outcomes?')),
                ('study_outcomes_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('date_violation_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date violation occured:')),
                ('protocol_violation_type', models.CharField(blank=True, choices=[('failure_to_obtain_informed_consent', 'Failure to obtain informed consent'), ('enrollment_of_ineligible_patient', 'Enrollment of ineligible patient'), ('screening_procedure not done', 'Screening procedure required by protocol not done'), ('screening_or_on-study_procedure', 'Screening or on-study procedure/lab work required not done'), ('incorrect_research_treatment', 'Incorrect research treatment given to patient'), ('procedure_not_completed', 'On-study procedure required by protocol not completed'), ('visit_non-compliance', 'Visit non-compliance'), ('medication_stopped_early', 'Medication stopped early'), ('medication_noncompliance', 'Medication_noncompliance'), ('national_regulations_not_met', 'Standard WPD, ICH-GCP, local/national regulations not met'), ('OTHER', 'Other')], max_length=70, null=True, verbose_name='Type of Protocol Violation/Deviation:')),
                ('protocol_violation_type_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('violation_description', models.TextField(blank=True, null=True, verbose_name='Describe the violation fully. How the violation happened, what occurred?')),
                ('violation_reason', models.TextField(blank=True, null=True, verbose_name='Explain the reason why the violation occurred:')),
                ('corrective_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Corrective action date and time:')),
                ('corrective_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Corrective action taken:')),
                ('preventative_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Preventative action date and time:')),
                ('preventative_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Preventative action taken:')),
                ('action_required', models.CharField(blank=True, choices=[('remain_on_study', 'Participant to remain on trial'), ('to_be_withdrawn', 'Participant to be withdrawn from trial'), ('remain_on_study_modified', 'Patient remains on study but data analysis will be modified')], max_length=45, null=True)),
            ],
            options={
                'verbose_name': 'Protocol Deviation / Violation',
                'verbose_name_plural': 'Protocol Deviations / Violations',
            },
        ),
        migrations.CreateModel(
            name='RecurrenceSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(max_length=30, unique=True)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('meningitis_symptom_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other symptom, please specify')),
                ('patient_readmitted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has the patient been re-admitted due to these recurrent symptoms?')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(15)], verbose_name='Score:')),
                ('recent_seizure', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Recent seizure (<72 hrs):')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('focal_neurologic_deficit', models.CharField(blank=True, max_length=15, null=True, verbose_name='If "Focal neurologic deficit" chosen, please specify')),
                ('cn_palsy_chosen_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='If other CN Palsy')),
                ('lp_completed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If YES, complete LP form', max_length=5, verbose_name='LP completed')),
                ('amb_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('amb_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If YES, specify length of course')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='TB treatment:')),
                ('steroids_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('steroids_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If YES, specify the length of course in days:')),
                ('steroids_choices', models.CharField(choices=[('N/A', 'Not applicable'), ('oral_prednisolone', 'Oral Prednisolone'), ('iv_dexamethasone', 'IV Dexamethasone used'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='If YES')),
                ('steroids_choices_other', models.CharField(blank=True, max_length=50, verbose_name='If other steroids, please specify')),
                ('CD4_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='CD4 count (if available)')),
                ('antibiotic_treatment_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotic treatment, please specify')),
                ('on_arvs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('on_arvs_before_enrollment', 'Already on ARVs before enrollment')], max_length=26, verbose_name='On ARVs:')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study date ARVs started.')),
                ('arvs_stopped', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='ARVs stopped this clinical episode?')),
                ('narrative_summary', models.TextField(help_text='Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology', verbose_name='Narrative summary of recurrence of symptoms:')),
                ('dr_opinion', models.CharField(choices=[('cm_release', 'CM Relapse'), ('cm_iris', 'CM IRIS'), ('OTHER', 'Other')], max_length=10, verbose_name="Study doctor's opinion:")),
                ('dr_opinion_other', models.CharField(blank=True, max_length=50, null=True, verbose_name="If other doctor's opinion, please specify")),
                ('antibiotic_treatment', models.ManyToManyField(blank=True, to='ambition_ae.AntibioticTreatment', verbose_name='Antibiotics treatment')),
                ('meningitis_symptom', models.ManyToManyField(blank=True, to='ambition_ae.MeningitisSymptom', verbose_name='What are your current symptoms?')),
                ('neurological', models.ManyToManyField(blank=True, to='ambition_ae.Neurological', verbose_name='neurologic:')),
            ],
            options={
                'verbose_name': 'Recurrence of Symptoms',
                'verbose_name_plural': 'Recurrence of Symptoms',
            },
        ),
        migrations.CreateModel(
            name='StudyTerminationConclusion',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('tracking_identifier', models.CharField(max_length=30, unique=True)),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report Date and Time')),
                ('patient_terminated_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date patient terminated on study:')),
                ('last_study_fu_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of last research follow up (if different):')),
                ('discharged_after_initial_admission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=6, verbose_name='Was the patient discharged after initial admission?')),
                ('initial_discharge_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of initial discharge')),
                ('readmission_after_initial_discharge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=7, verbose_name='Was the patient readmitted following initial discharge?')),
                ('readmission_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of readmission')),
                ('discharged_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date discharged')),
                ('termination_reason', models.CharField(choices=[('10_weeks_completed_follow_up', 'Patient completed 10 weeks of follow-up'), ('patient_lost_to_follow_up', 'Patient lost to follow-up'), ('dead', 'Reported/known to have died'), ('consent_withdrawn', 'Withdrawal of Subject Consent for participation'), ('care_transferred_to_another_institution', 'Care transferred to another institution'), ('late_exclusion_criteria_met', 'Late exclusion criteria met'), ('included_in_error', 'Included in error')], help_text='If included in error, be sure to fill in protocol deviation form.', max_length=75, verbose_name='Reason for study termination')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Death')),
                ('consent_withdrawal_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason for withdrawing consent')),
                ('willing_to_complete_10w', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=12, verbose_name='Is the patient willing to complete the W10 and W16 FU visit only?')),
                ('willing_to_complete_centre', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=17, verbose_name='Is the patient willing to complete the W10and W16 FU visit only at their new care centre?')),
                ('willing_to_complete_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name=' Date the 10W FU due')),
                ('protocol_exclusion_criterion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=12, verbose_name='Late protocol exclusion met?')),
                ('included_in_error_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If included in error, date')),
                ('included_in_error', models.TextField(blank=True, max_length=300, null=True, verbose_name='If included in error, narrative:')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('already_on_rifampicin', 'Already on Rifampicin')], max_length=30, verbose_name='Rifampicin started since week 4?')),
                ('first_line_regimen', models.CharField(choices=[('N/A', 'Not applicable'), ('TDF_3TC_FTC_with_EFV_or_NVP', 'TDF + 3TC/FTC + either EFV or NVP or DTG'), ('AZT_3TC_with_EFV_NVP_or_DTG', 'AZT+3TC+ either EFV or NVP or DTG'), ('OTHER', 'Other')], default='N/A', max_length=75, verbose_name='ART regimen started for naive patients (or regimen switched for those already on ARVs)')),
                ('first_line_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('second_line_regimen', models.CharField(choices=[('N/A', 'Not applicable'), ('TDF_3TC_FTC_with_ATZ_r_or_Lopinavir_r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT_3TC_with_ATZ_r_or_Lopinavir_r', 'AZT +3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other')], default='N/A', max_length=50, verbose_name='Second line / second switch ARV regimen')),
                ('second_line_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('arvs_switch_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='ARV switch date')),
                ('first_line_choice', models.CharField(choices=[('N/A', 'Not applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], default='N/A', max_length=5, verbose_name='If first line:')),
                ('arvs_delay_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason ARVs not started')),
            ],
            options={
                'verbose_name': 'Study Termination/Conclusion',
                'verbose_name_plural': 'Study Terminations/Conclusions',
            },
        ),
        migrations.AlterModelOptions(
            name='aeclassification',
            options={'verbose_name': 'AE Classification'},
        ),
        migrations.AddField(
            model_name='aefollowup',
            name='ae_grade',
            field=models.CharField(blank=True, choices=[('4', 'Grade 4 - Life-threatening'), ('5', 'Grade 5 - Death')], max_length=25, null=True, verbose_name='If severity increased, indicate grade'),
        ),
        migrations.AddField(
            model_name='aeinitial',
            name='ae_name',
            field=models.CharField(max_length=25, null=True, verbose_name='Short description of AE'),
        ),
        migrations.AddField(
            model_name='historicalaefollowup',
            name='ae_grade',
            field=models.CharField(blank=True, choices=[('4', 'Grade 4 - Life-threatening'), ('5', 'Grade 5 - Death')], max_length=25, null=True, verbose_name='If severity increased, indicate grade'),
        ),
        migrations.AddField(
            model_name='historicalaeinitial',
            name='ae_name',
            field=models.CharField(max_length=25, null=True, verbose_name='Short description of AE'),
        ),
        migrations.AlterField(
            model_name='aefollowup',
            name='outcome',
            field=models.CharField(choices=[('continuing/update', 'Continuing/Update'), ('increase_from_g3', 'Severity increased from Grade III'), ('recovered', 'Recovered/Resolved'), ('recovering', 'Recovering/Resolving at end of study'), ('not_recovered', 'Not Recovered/Resolved at end of study'), ('unknown', 'Unknown/Lost to follow-up'), ('recovered_with_sequelae', 'Recovered with sequelae'), ('death', 'Death')], max_length=25),
        ),
        migrations.AlterField(
            model_name='aefollowup',
            name='relevant_history',
            field=models.TextField(help_text='Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.', max_length=1000, verbose_name='Description summary of Adverse Event outcome'),
        ),
        migrations.AlterField(
            model_name='aefollowup',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report date and time'),
        ),
        migrations.AlterField(
            model_name='aeinitial',
            name='ae_cause',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has a reason other than the specified study drug been identified as the cause of the event(s)?'),
        ),
        migrations.AlterField(
            model_name='aeinitial',
            name='ae_cause_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If YES, specify'),
        ),
        migrations.AlterField(
            model_name='aeinitial',
            name='ae_cm_recurrence',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='unknown', help_text='If YES, fill in the "Recurrence of Symptoms" form', max_length=10, verbose_name='Was the AE a recurrence of CM symptoms?'),
        ),
        migrations.AlterField(
            model_name='aeinitial',
            name='regimen',
            field=models.CharField(choices=[('single_dose', 'Single dose'), ('control', 'Control')], help_text='<ul><li>Single-dose: Ambisome 10mg/kg on day 1 with Flucytosine 100mg/kg/day and Fluconazole 1200mg/day for 14 days.<li>Control: Amphotericin B 1 mg/kg for 7 days with Flucytosine 100mg/kg/day for 7 days followed by Fluconazole 1200mg/day for 7 days.</ul>', max_length=50, verbose_name='Patient’s treatment regimen'),
        ),
        migrations.AlterField(
            model_name='aeinitial',
            name='sae_reason',
            field=models.CharField(choices=[('N/A', 'Not applicable'), ('death', 'Death (Please complete Death form and Study termination form)'), ('life_threatening', 'Life-threatening'), ('significant_disability', 'Significant disability'), ('in-patient_hospitalization', 'In-patient hospitalization or prolongation (beyond 1 week from study inclusion)'), ('medically_important_event', 'Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)')], default='N/A', max_length=50, verbose_name='If YES, reason for SAE:'),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='ae_classification',
            field=models.ManyToManyField(blank=True, to='ambition_ae.AeClassification', verbose_name='Classification of AE:'),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='ae_classification_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If Other, specify ...'),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='clinical_review_datetime',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date and time of clinical review: '),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='investigator_comments',
            field=models.TextField(blank=True, null=True, verbose_name='Investigator comments:'),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='officials_notified',
            field=models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time regulatory authorities notified (SUSARs)'),
        ),
        migrations.AlterField(
            model_name='aetmg',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report date and time'),
        ),
        migrations.AlterField(
            model_name='historicalaefollowup',
            name='outcome',
            field=models.CharField(choices=[('continuing/update', 'Continuing/Update'), ('increase_from_g3', 'Severity increased from Grade III'), ('recovered', 'Recovered/Resolved'), ('recovering', 'Recovering/Resolving at end of study'), ('not_recovered', 'Not Recovered/Resolved at end of study'), ('unknown', 'Unknown/Lost to follow-up'), ('recovered_with_sequelae', 'Recovered with sequelae'), ('death', 'Death')], max_length=25),
        ),
        migrations.AlterField(
            model_name='historicalaefollowup',
            name='relevant_history',
            field=models.TextField(help_text='Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.', max_length=1000, verbose_name='Description summary of Adverse Event outcome'),
        ),
        migrations.AlterField(
            model_name='historicalaefollowup',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report date and time'),
        ),
        migrations.AlterField(
            model_name='historicalaeinitial',
            name='ae_cause',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has a reason other than the specified study drug been identified as the cause of the event(s)?'),
        ),
        migrations.AlterField(
            model_name='historicalaeinitial',
            name='ae_cause_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If YES, specify'),
        ),
        migrations.AlterField(
            model_name='historicalaeinitial',
            name='ae_cm_recurrence',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='unknown', help_text='If YES, fill in the "Recurrence of Symptoms" form', max_length=10, verbose_name='Was the AE a recurrence of CM symptoms?'),
        ),
        migrations.AlterField(
            model_name='historicalaeinitial',
            name='regimen',
            field=models.CharField(choices=[('single_dose', 'Single dose'), ('control', 'Control')], help_text='<ul><li>Single-dose: Ambisome 10mg/kg on day 1 with Flucytosine 100mg/kg/day and Fluconazole 1200mg/day for 14 days.<li>Control: Amphotericin B 1 mg/kg for 7 days with Flucytosine 100mg/kg/day for 7 days followed by Fluconazole 1200mg/day for 7 days.</ul>', max_length=50, verbose_name='Patient’s treatment regimen'),
        ),
        migrations.AlterField(
            model_name='historicalaeinitial',
            name='sae_reason',
            field=models.CharField(choices=[('N/A', 'Not applicable'), ('death', 'Death (Please complete Death form and Study termination form)'), ('life_threatening', 'Life-threatening'), ('significant_disability', 'Significant disability'), ('in-patient_hospitalization', 'In-patient hospitalization or prolongation (beyond 1 week from study inclusion)'), ('medically_important_event', 'Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)')], default='N/A', max_length=50, verbose_name='If YES, reason for SAE:'),
        ),
        migrations.AlterField(
            model_name='historicalaetmg',
            name='ae_classification_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If Other, specify ...'),
        ),
        migrations.AlterField(
            model_name='historicalaetmg',
            name='clinical_review_datetime',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date and time of clinical review: '),
        ),
        migrations.AlterField(
            model_name='historicalaetmg',
            name='investigator_comments',
            field=models.TextField(blank=True, null=True, verbose_name='Investigator comments:'),
        ),
        migrations.AlterField(
            model_name='historicalaetmg',
            name='officials_notified',
            field=models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time regulatory authorities notified (SUSARs)'),
        ),
        migrations.AlterField(
            model_name='historicalaetmg',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Report date and time'),
        ),
    ]
